import { ProfanityBuilder } from "./binarySearchTree/profanity/profanityBuilder.js";
import { CharacterSetBuilder } from "./characterSetBuilder.js";
import { FilterBuilder } from "./filterBuilder.js";

/**
 * Must do all tests in dedicated command prompt.
 * No CPU intensive programs in the background.
 */

export const purifyPerformance = (): void => {
  const cs = new CharacterSetBuilder({
    confusablesByPackage: 'include',
    confusablesByUnicode: 'exclude',
    confusables: 'purify'
  }).build();

  const list: string[] = [
    "𝑧𝙛𝕛⒩𝖆ｆ𝙙⒬𝙙𝗾ｓ𝙥𝗓𝙖𝒓𝗊ⓢｄｙⓩ𝚒𝑥𝑘𝕥𝖙𝗊𝓏𝓽𝐧ｃ𝑐𝒔𝗁𝑞𝚗𝙚ｓ𝚞𝔥𝓎𝖋𝐪ｌⓕ𝔡𝗸𝐠𝚔𝐪𝔦𝑧𝚏ⓟ𝕥𝖋⒦𝑤⒨𝒋𝗐𝚘𝐭𝙦⒫ⓚ𝒗𝗯𝖉𝑖ｄ𝕖𝓾𝓌𝘄𝒽𝙥𝒅𝒾ｎ𝑢𝐛𝔠𝕟⒭𝙫𝗋𝘶⒣𝔁ｔ𝒗𝓉𝗹ℯ𝓋𝘧ｉ𝓂𝕙⒢",
    "⒣𝙙𝚞𝕠𝙮⒣𝘅𝗲𝓌𝗒ℊ𝖐ｖ𝙮𝚑𝚙𝘁𝘸𝙡𝒙𝘀𝓀𝔪𝑡𝚚𝗎𝚢𝙧𝐠𝒍𝚍𝑥𝚖𝗈𝚞⒢𝓌𝚜𝓫ｉ𝓺𝐧ｙ𝗴𝖚𝙠𝚚𝖏𝘀𝒄⒡𝕨𝙭𝚗𝗾ⓘⓡⓓ𝗿𝘹𝔞𝘣𝓫ｙ𝓪𝚡𝔢⒳𝙧𝕥𝕛𝓾ℎｑⓦ𝐥𝗌𝕢⒦𝔯ℴ𝗓ⓟ𝗑𝒗𝕢ⓧⓞ𝔤𝕥ｎ𝕚𝒔𝘶ⓥｘ𝚕𝕗𝑣𝔷",
    "𝗅𝓎𝘁⒧ℊ𝑐𝚖ｘ𝔥𝚙ｌ𝚓𝚖⒭𝓃𝕟𝘷𝒾𝗌𝒔ⓝ𝑘𝖙𝔥𝒎𝓴𝒏⒳ｎ𝒌𝖝𝙣𝒏𝒇𝔁𝒎ⓐ𝒉𝚠𝑓𝗓𝔱𝖜ｇ𝖎𝕛𝗼𝒄𝙬𝙯⒟ⓘ𝒙ⓒ𝐮𝑜𝘁𝘀ｎｂｂ𝓸𝙗𝑛𝙙𝖞𝔷𝚊ⓓ𝑘𝓶𝐨𝓭𝕪𝙗𝚚𝙮ｂ𝑏𝕖ⓤ𝚙⒤𝘅𝗳𝘶𝗉𝙜𝔫𝗄𝐱ⓠ𝗵𝖽𝘦𝘧𝚞ⓟ𝚕𝚝",
    "𝖋𝑞𝗈𝐫𝗌𝖇ⓒ𝗽𝘢𝘅𝘥𝑚𝓍⒱𝒈ｏ𝒽𝔭𝓹ｈ𝚘𝘀ⓛ𝙜𝖓𝖋𝚗𝓷𝕩𝙡𝘤𝓃𝒏𝓶ⓣ𝖉𝖎𝒋𝙯𝓎ⓘ𝐛𝗓𝔂𝙠𝐯ⓐ𝕗𝙨𝒃ⓑ𝑐𝓂𝓅𝕤𝒖ｍ𝕦𝔨𝑖𝑙𝘸𝑤𝘴𝗏𝗮𝒕ⓙ⒠𝗮𝕥𝔂⒠𝑔𝓴ⓣ𝖾𝔁𝗶𝔥⒩ⓒ𝔶𝖉𝓋𝙟𝕢𝓅𝒸𝚑𝗹𝑝ⓔ𝔂⒝𝖑⒣𝔁𝓏𝔪",
    "⒮𝙦𝘢𝑥𝙩𝓭𝚎𝚠⒞𝙢𝚠𝓷𝐤𝑝ⓥ𝗱𝓸𝙮𝒖𝑦𝘬𝓅𝗍𝐰⒰𝓆𝖓𝗷𝘶𝔢𝘺𝗑𝙙𝕟𝗱𝙡𝒂𝑠𝖎𝗴ⓖａ𝐜𝘀𝑏𝕚𝐰𝗰𝚠𝙘⒩𝙚𝖚ⓙ𝚛𝑝𝒃𝓸𝚜𝖉𝐲𝔮𝔨𝗇ｗ𝔪ⓥ𝗇𝐟𝕖𝖌𝓵⒯𝐚𝓊𝘵𝖼𝕫𝔷ｂ𝔫⒞𝘫𝘹𝘤⒰𝑎𝒋𝚝𝕫𝘴𝑦𝔁𝘪𝖇𝒹ｗ𝙟𝖻𝕨",
    "𝐠ℯ𝔂𝔨𝓅𝓱𝔃ｈ𝓋𝒷𝕞𝕪𝔡𝐠𝒖𝗈𝒐𝙬ｇ𝓵𝑜𝓇𝙜𝚌𝔰𝓁ⓢ𝗀𝙢ⓥⓔ⒯𝑗𝓼𝑟𝙪𝕛𝘴𝘺𝐭𝑧⒪𝓌𝗽𝗄𝗊𝒚𝒽𝚠𝘳𝑢𝗍𝐱ℴ⒨𝘅𝖚𝒋𝔥𝕨𝕤𝕦𝖗⒯𝓎⒯𝒒𝔲𝓌𝓁𝔤𝔂𝕪ⓙ𝖑𝐢𝒘𝗴ℎ𝓺𝚑𝓊𝘴𝙮𝚌𝒐ｑ𝔴𝕫𝖕𝒿𝙬𝑖⒥𝘯ｅ𝖛𝚞𝑗⒩",
    "𝖏𝒉𝔡𝗄𝕣𝗄𝓬𝐟𝙪𝘁𝚎𝑐𝑐𝕕𝖐𝖚𝓻𝘷𝖈𝚜ｂ⒥𝓍𝑎ⓥ𝙛𝑙𝚗ⓑ𝘢ｗ𝖚𝘳𝒻𝐠𝔀ⓤ𝑧𝒎𝕛𝓋𝑖𝔷ｌ𝗀𝚢𝘵𝐮𝐱𝑑𝔦𝒋𝕥ｕⓖ𝒷𝖍𝑏𝒕𝚕ⓠ𝓱𝘄𝒗𝘭𝖈ｇ𝖌𝖙𝐚𝐱𝑓𝙟𝖔𝒓𝚛𝓮𝒓𝐢𝙘𝓁𝚒𝗹𝗄𝘻⒱ｌ𝘬𝙝𝑘𝓋𝓂𝔤⒩⒰𝘴𝒾ℴ𝑓𝓷",
    "𝘹𝑚𝓈𝘣𝒕𝘢𝗏𝙠𝒹𝖺ｄｄ𝙤𝘅𝙯𝗾𝓶ⓦ𝒉ｚｉ𝘱ℎ𝕞𝚐𝐡𝙨𝗊𝑝𝙩𝖎𝗑𝑟𝕩𝔶𝚗𝓳𝓺𝙗𝚠𝙘ｊ𝑙⒟ｘ𝓎𝗯𝘫𝑛𝐤𝔁𝒈𝗀𝗏𝓅𝓷ｑ𝖛𝘴𝗇𝒙𝖻𝑎𝘨𝔂𝘬𝗴𝕖ｖ𝖾ｒｍ𝑘𝙞𝘸𝙞𝕫𝚙𝖙𝗼𝚛𝗱𝘪𝗏𝔫𝗋𝙘𝐫𝘅𝘁𝗰𝘢𝒃⒲𝓿ｖ𝐢ℎ𝒍𝙜",
    "𝒊ⓦ𝗼𝑐𝕢𝖗𝒶⒳ⓚ𝑑𝒙𝓲𝔭ｗ𝖒𝒆𝒑𝘵𝕙𝓭𝓅𝙠𝗎𝐩𝑔𝐠⒭𝗍𝗃𝑦𝚞𝕗𝘺𝒈𝔣𝘇ｇ𝕛ｈｘ𝔁⒦𝕙𝒆𝓵𝗱𝔧𝑏𝔤𝕓𝖙ℊ𝒎𝚋𝕒ⓚⓞ⒡ⓚ𝔁𝒆𝙠ａ𝒉ⓑ𝔰ⓔ𝙬ｖ𝘳𝔲⒬⒰𝓃𝑗𝓿𝓈𝔩𝘲𝐝𝚜𝚑𝓵ⓨｃ⒱𝒊𝖆𝖻𝗽𝗋ｔ𝐲⒡𝐡ｓ𝘅𝙭𝒍𝖾",
    "𝖛ｖ𝐜𝖎⒴𝖛𝔷𝘴𝔀𝒹𝔡𝖛𝘴𝐜𝐡𝑢𝚊𝑝𝐩𝘹𝓊𝕨𝚣𝚖𝒻𝔱𝐠𝓪𝑏𝚊ⓗ𝗅ｔ𝔧𝕤ｃ𝒋ⓔ𝗌𝙚𝖕𝓫ｉ𝖜𝕚𝒗𝑦𝚊ⓤ𝘹𝐱ｇ𝚐𝚛ⓝ𝒇𝐩𝔡𝓆𝔦𝙥ｑ𝓶𝗍𝓀𝖛ⓤ𝐣𝗌𝑎𝘲𝐠ⓛ𝘃ⓤ𝓽𝒶⒢𝓅𝔀𝚙ｎｘ𝚢𝒸𝑤𝖓𝕗ⓑ𝗴𝑞⒩𝙧𝚓ⓤ𝙢ｊ𝗽𝖊ℎ",
    "𝘫𝒕ｉ𝔤𝙦𝙥𝕥𝙯𝙞⒪ⓥ𝒘ｋ𝖊ⓡ𝖛𝒘𝓯⒭𝘤𝕪𝓷ⓢ𝒚𝖚𝐳𝒒𝖓𝖒𝒑ｇ⒦ｒ𝑒𝔧𝓊𝑙⒫𝖜𝗺𝚢𝓅⒵𝖟𝓺𝗉𝗍ⓒ𝘰𝚗𝐳𝕞𝐚⒪𝓏⒲𝖉𝘻𝑜𝙤𝓉𝗷𝘳𝐠𝘩𝘦𝒅𝑠𝖖𝐡𝐳𝐮⒰𝑠𝐭𝓍𝑝𝔠𝕔𝗴ｘ⒨𝓺ｚ⒮𝔢𝐚𝒍𝖝𝘪⒬𝓎𝖐𝐲𝐭𝙯𝘃𝔧𝚒𝗍",
    "𝘹𝐬ｅ𝒃𝕔𝙝𝙡𝚏𝒒𝙥𝐩ｌ𝘇𝚘𝚗⒥𝚣ⓟ𝓌𝐪𝚔𝘳𝑓𝒷𝗌𝐝𝙡𝙗𝐝𝖽𝑏𝚜𝚡𝒛𝖕𝗾𝗹𝔫𝓻𝗎𝕩𝚔ｍ𝚝𝒄ｕｄ𝖙𝔃ⓥ𝓿𝒛𝘭𝕟𝚓𝑡𝓊⒳ｍ𝗿ｍ𝗆𝕓𝒒𝖇𝘺𝒇𝖈𝐞𝗀𝙙𝗯𝖝𝕩ⓚⓢ𝑏⒦𝔡𝐦𝘢𝔀𝗑ℴ𝗄𝓲⒤⒩ｖ𝙠𝖾𝐢𝒛⒣𝖺𝘄𝔴𝒆⒨𝘭",
    "𝕫𝕓ⓑ𝒂𝗲𝓫⒡𝓿𝕦ⓞ𝐛ⓒ𝕚ｂ𝐣⒪𝘶𝙪𝖌𝐬𝕗𝕙𝒽ｗ𝖓𝑞𝔦⒲𝕣𝒓𝓌𝘴𝖎𝕠𝒌𝐝𝖾𝕩𝒗⒫⒰𝐬⒢𝐦𝕠𝓊𝕡𝗈ｚ𝐯𝕕𝗹𝓵𝖞𝖋𝒶𝖼𝖑ｆ𝗿𝓇𝔀𝕝𝕨𝕥𝙝𝒃𝗏𝕫ｈ𝖓ｐ𝖙𝐢𝓬𝕨𝗳𝐬𝘭ⓠ𝙬𝚛𝓷ｈ𝗴𝗵ｂ𝚎𝙙𝒆⒞𝖏𝘸𝖙𝗇𝚡𝔂ⓟ𝔴𝖙",
    "𝑟𝗍𝘱𝔀𝘱𝘸⒴𝓷𝙝𝑥𝐜𝕚𝚓𝑚𝖑𝐮𝖛𝐬𝔥⒦ⓓⓓ𝕫𝗋ℯ𝐧𝕛𝓃⒱ｆ𝚋𝕖ⓜ𝘲𝖚𝑖⒱𝖎𝘮𝓉𝑎ⓥ𝚞𝘱𝕩𝔳⒜𝖛𝒓𝒏𝑘𝓮ⓢ𝗅𝘢𝐩𝙛𝔡ⓞ𝒑𝘃𝙪𝖗⒲𝓆𝐛⒞𝘻𝚣⒟𝚘𝙮𝐨𝗼𝘣𝘂𝙨𝚎𝒽𝐠𝖝𝚛ⓘ𝔩𝐪𝘪𝕟𝗆ｅⓕ𝗉𝘂𝒒𝗴𝓴𝒙𝒆𝖿𝒉⒱",
    "𝑔𝕟ｎ𝘨𝐲⒡𝘫𝖐𝐚ⓢ𝘁𝚕𝑗𝔁𝔰ｖ𝗺𝑗𝐠⒡𝘩𝗌𝔂ｉ𝘥⒱𝐠𝖽𝔦𝚐𝘂𝕧𝒚𝑚𝑙𝚑𝓫𝓹𝖎⒣⒰ｌ𝙤𝘤𝐦𝔷𝔶𝙦𝒉⒣ｇｃ⒪⒢𝘵𝚘⒣𝖺⒡𝘻𝖕𝙫𝒊𝘫𝘢𝓈𝖺ⓛ𝒶𝓵𝗺ⓞ𝘧𝓭𝓇𝖘𝕣ⓡａ𝗿⒳𝐞𝚊𝗻𝘂𝖆𝗾𝒄𝚕⒦𝓫𝑟𝕧ⓞ𝖇𝔬𝓽𝙫𝑒𝓏",
    "ｊ⒬𝒏𝙟𝘮ⓑ𝐟𝘆𝒏𝙘𝐥𝘃𝙖𝚑𝒹𝔦𝕤𝘵⒫𝘰𝕞𝗿𝙝ｉ𝓶𝓈𝗇𝚔𝙧𝚒𝙬ｄ𝐢𝙮𝗇𝘅𝑝𝒻𝗈𝔧𝔪ｙ𝕓𝑚𝑝𝑝𝘯𝘧𝓎𝙪𝗳𝘮𝓌𝗲𝓃𝐟𝒎𝘣𝓼ⓩ𝔮𝗶𝓪𝖒𝗓𝓃𝗌𝖕𝖍𝖍𝔥𝘢𝙫𝖞𝕙𝚜𝐧𝑥𝓿𝑒𝘀𝓁𝙪𝒉𝖻𝖘𝔬ｖ𝔟𝗅𝚌𝒾⒮𝓯𝑦ｙ𝖟𝘮𝚣𝘩",
    "𝓸ⓐ𝕨𝔨𝗇𝖔𝒹ⓟ𝔶𝚡𝘂𝐞ⓓ𝗌𝓰𝚝⒮𝙢𝔟𝑘𝓊⒱𝙪𝘪𝐮ｕｎ𝕪⒯𝑡𝕛𝖒𝙮𝔃ｐ𝚕𝘫𝐩𝘷𝒎𝐢𝓵𝒗𝗺ℊ𝒾𝘦𝗵𝖏𝚌𝙚𝓶𝖕𝑜𝗋𝐤ⓤ𝙝𝐥𝙜𝔠𝓹𝓯ｊ𝐠𝚓𝔳𝔀𝙜𝖎𝐫⒨𝗲𝖗ｑ𝘂𝐮𝓆𝑘𝓈𝐯⒜𝚓ⓖ𝔦𝒆𝖎ｙ𝘱𝔀𝚖𝚞𝔂ｈｇ𝚍⒱𝓿𝗶𝒄",
    "𝕚𝘢𝑤ｍ𝗺𝘇𝙟𝙣𝑒⒯𝖚𝗵𝙠𝐧𝘧𝚒𝘻ⓩ𝗲𝔠𝑎𝒐𝒅𝚕𝓳𝙜ℴ𝘰𝕪𝚘𝔞𝐲𝑟𝒚ｆ𝙞𝓰𝘬𝘮𝘣𝘂𝘴𝘺𝐤𝗑𝗿𝖇𝑔ⓕ𝚐⒨𝘩𝒒𝖋𝗇𝖼𝒿⒦ⓕ𝗯𝔡𝕡𝐱𝐪𝙞ⓞ𝙦𝐝𝕙𝔤𝚢𝗌𝖐𝘄𝘲𝔤𝕓⒢ⓐ𝚘𝘨𝕪𝗓𝖔⒵ⓥ𝒹𝘅𝔰𝑔𝑟𝗍𝕩𝚛𝒎𝗳𝒃⒫𝗑𝕘",
    "𝓈𝑎𝐯𝐨𝗍𝒔⒬𝗼𝐨ⓘ𝐱𝗂𝘴𝒌𝘩ℯ𝓆𝗵𝖙𝕔𝘥⒪𝓸⒨𝓃𝘧𝖏𝖉𝓰𝖔⒪ⓚ⒫𝖘𝐬𝕙𝙭𝗏𝕡𝐩𝒒𝕖𝕧𝒃ｘｓ𝒑⒵𝓼ｖ𝗇𝓀ⓑ𝘶𝐜𝑖𝚢𝘷𝕓𝙣𝘳𝚗𝗃𝖞𝒶𝑞𝑙𝒑𝒎⒮𝒕𝙤ｋ⒭𝓆𝖆𝒓𝓾𝓆𝖔ｉ𝕡𝙜𝒿𝙬𝘆𝑞𝑓𝕕𝐲𝑓ⓓ𝗰𝚡⒴𝖟𝖖𝙮ⓟ𝖇",
    "⒨𝚜𝒙𝓍𝕫𝘀ｂｆ𝓆𝚗𝔱𝑣𝓷𝐤𝚍ｊ𝖔ⓒ𝓯𝐞𝙟𝗲𝑠𝗃𝙫𝚊𝒔𝕓𝑙𝖋𝗀𝙯ⓟ𝔱𝖌ｈ𝖙𝕙𝖾𝐜𝓰⒟𝑖𝘀𝓲ａｆ⒭𝘥𝓃𝚡𝒇ｂ𝚑𝘀ｑ𝔤ｈ𝒌ⓝⓖⓕⓨ𝘣𝒅𝒓𝒹𝘀𝖙ⓚ𝚐𝓺𝕧𝙣𝙤𝚐⒨⒰𝔴𝐡𝒏𝕚𝖉𝖇𝒷ⓦ𝐟𝐥⒫𝑦𝗐𝐩𝒉𝙙⒵𝘲⒤𝚣𝖔𝓬",
    "𝒕𝔰𝑏𝖖𝘦⒩ⓠ𝚙𝙩⒟⒞𝗒𝐯𝒗𝕖𝙝ⓒ𝒏𝚓𝒉𝔴𝙥𝙗𝓎⒴𝗴𝘆𝔠𝘮𝕜⒴𝑤𝒑𝓀𝐡𝐱𝑛𝒽𝕗𝘮⒪𝑜𝖈𝐲𝘺ℴ𝙡⒦𝐭𝘧𝕪𝚗𝒂𝙛⒞𝐬ⓥ𝖌𝔂ⓛ𝚊𝓀𝕨ⓑ𝗻𝒊𝓻⒯𝔃𝓽𝙯𝙩𝖕𝗿𝘹𝒒𝓋𝖋𝗁𝖉𝗺𝐫𝗵𝖑𝗻𝖙𝘮𝔱𝘣𝓃ｄ𝑏𝖙𝗯𝚘𝑝𝔦𝑔𝗁𝘳",
    "𝗸⒠𝗏ⓗ𝔲𝕟⒞𝒇𝑒𝙚𝑏𝕞𝙖𝘭𝒙𝔲𝕗𝘬⒩𝒊𝖻𝘬ｏ𝖌𝙝𝓷𝐚𝖐ⓡ𝗅𝙚⒵𝙘𝓸𝗮𝑔⒪ｌ𝓪⒫ｌ𝒂𝙮𝙫𝑤ｅ𝘄𝗮𝒾𝖉𝐮𝙘𝖞𝓇ⓗ𝑤𝒎𝙬𝚣𝔬𝒶𝚡𝙨ｉⓖ𝗲⒜𝔨𝖔ｋⓠ𝖎ｒ𝓆ⓩ𝚣𝘁𝖘ⓖ⒩𝗈ｅ𝕪ⓜ𝓷𝐟𝔫𝓌𝐝𝕜𝗏𝖍⒰𝒿𝕦𝗁𝔪𝒸𝑏𝒖",
    "ｓ𝗑𝓪𝘤𝓅𝖟𝑎𝚟𝓸ⓨ𝕩𝒓ⓜ⒲𝔱𝑒ⓘ𝘄𝘤𝘥𝕚𝖼𝐡𝕡ⓦ𝖎𝓽⒡ｄ𝖽𝔥𝓿𝗰𝕡𝔂𝗑𝘆𝓉𝒽⒤𝚡𝕕ℯ⒠𝐫⒰𝕝𝕠𝐬𝘭𝓊ｃ𝘧𝕥ⓖ𝚚𝕩𝗇𝖕𝔪𝒍𝙫𝒚ａ𝗷𝒿𝓪⒢𝖽𝗑𝗎𝑢𝙛𝙨𝐡𝓫𝔬𝑞⒫𝔁𝗊𝓊𝘨𝖙𝗁𝕥𝓳ⓨ𝑗𝖏𝔮𝚘𝑟𝑐ｋ⒦𝘬𝖻𝘸𝚡",
    "𝕫𝓇𝑖𝐡𝘥𝓇𝙜ｓ𝚡𝐠ｎ𝚜ｕ𝚕𝚌𝗊𝚓𝐮𝘥𝓎𝔀ⓤ𝗅𝘬𝕙𝖝𝗯𝗰⒭𝔫𝖔ｕⓘ𝔩𝖙⒩𝙥ｈⓞ𝙘𝓸𝖾𝖙⒳𝗏ⓖ⒤𝗏𝚌ⓓ𝖞𝕖ｘ𝗂𝙛𝙢𝘄𝔤𝗾ⓩ𝓌𝖙ｔ𝖋𝓵𝒽𝓹𝑘⒞𝗴𝓋𝕝𝔠ⓦ𝗓𝚐⒮ℎ𝖿𝔡ｋⓨ𝗉𝗋𝐨𝗱𝑤𝙖ⓖ𝓱𝖓𝚓𝗊𝒷ｌ𝙞𝖙𝖊𝚐𝒋",
    "𝒛𝚊𝙮𝐝𝔲𝐨𝓾⒬𝗷𝔪ｗⓥ𝑘𝖝𝚜𝗳𝘢ⓙ𝖽𝑢𝘂𝖉𝐱𝕔ｉ𝗴𝘪𝓹𝙧𝒋𝐳⒬𝚞𝖓𝔰𝓳ｕｔⓤ𝓶𝕕𝘧𝚣𝒂𝓇𝘴𝕣𝖍𝐨𝕔𝙥𝔞𝘧ⓠ𝖔𝐧ⓟ𝔳𝒇𝘆𝔁ⓑ𝔨𝗐𝖛𝑏𝖝𝐡⒫𝙪𝑝𝘣𝕓𝐳𝖗𝘇𝘬𝕕𝕣⒫𝐜ⓚ𝒄ｚ𝕠𝚣𝔦𝕧𝗏𝚓𝚖𝓌𝓭𝐪ⓤ𝐦𝓀𝗇𝕙𝓸",
    "ｗ⒱𝘯𝗂ｙｅ𝗎𝓪𝔀𝚛𝖍𝕪𝘬ⓛ𝐱ⓧⓘ𝔧𝗑𝕝𝚚𝗓𝓀𝑧𝘸𝚡𝗻𝓌𝕟𝒌𝘁𝕚𝖽ｒ𝕜𝑏𝗏ｏ𝖜𝗲𝚡𝔁𝔁𝑠𝓊𝔟𝒈𝕘ｌ𝔲𝗴𝓁ⓩ𝙦𝗼𝘣𝗃𝒚𝒓ⓔℴ𝕚𝙩𝙣𝒻𝓵𝓏⒦𝘶𝗿𝓈𝒾ｆ𝗰𝓻ⓓ𝗌𝖌𝕨𝙫𝓴𝚖ｓ𝘸⒟𝔀𝕫𝙥𝐟𝗷⒦𝕥𝕟ｉｂ𝘧𝒻𝔞𝔳𝒄",
    "⒪𝕒𝑔𝑙⒩𝕘𝗷𝗹𝐥𝓽ｘ𝗴𝚖𝗀⒵𝚝𝓃𝙣𝔧𝚕𝘆𝗊𝘸𝗉𝗎𝚛𝒎ⓡ𝖑𝒚𝒙𝒌ⓙｑ⒱ⓔｖｚ𝕘𝓎𝖒𝒚𝓯𝒆𝓎𝓱ⓢ𝑠ｔ𝐪𝗀𝔰𝔷𝑘𝙚𝑜𝔂⒢𝔳𝔳ｒ𝙚𝚘ℴⓢ⒰ⓤｐｂ𝖺𝓼ℊ𝓶𝖈𝖺𝗉𝓳𝔠𝘁⒭𝚋ｅ𝐚𝔃𝚛𝕣𝒹𝚡𝒖𝙞𝕠𝑑𝕕𝕡𝙪ℊ𝒂𝐦𝚗𝙙",
    "𝚓𝓹𝒄𝑣𝙬ｘ𝓻𝐣⒨𝗄𝔁ｇ𝑛𝒖𝖾𝐥𝖕𝘥𝒌𝐢𝘅𝙭𝘇𝑓𝗯𝘸𝐛𝓎𝕞𝘱⒲⒞𝘥𝙢ⓥ𝐰𝖆𝐛ⓠ𝚚𝒋𝗅𝗴𝖓𝘺𝔭𝙠ⓩ𝔬𝓲𝑠𝐣𝗋𝗐ｉ𝘭𝐡𝐨𝔤𝖻𝓶⒪𝐛𝔤𝘪𝙛𝓴𝐬𝐯ｖ𝘀𝕔𝘩𝓽𝒓𝓺𝖈𝒂𝖿ｂ𝓂𝕢𝕨𝗓𝖽𝓲𝘲𝙦𝚐𝗉𝓋𝑓𝕠𝚋𝗈𝗿𝓽𝓋𝒹𝖉",
    "𝕠𝒘ⓘ𝕝ⓟ𝘰𝐰𝔬𝑝𝗄𝖉𝔩𝑤𝗾𝚏𝔧𝗒𝘨⒩𝚠𝓷ⓚ𝗎𝐠𝓹ⓕⓧⓘｚⓡ𝐠⒫𝖛𝔞𝖑𝔟𝚎𝖆𝗂𝕦ⓛ𝘭⒱𝚗ｃ𝐩𝔱𝚔𝓶ⓞ𝚔𝗾𝗺𝐯𝙘𝓬𝔦𝖾𝓯𝚣𝘺𝒑𝘲𝒷𝘳𝒌𝔭⒭𝕩⒣𝒂𝗺𝖞𝙭ⓛｚ𝕗𝙬𝘴𝕩𝙭𝙞𝑞𝑏𝘱𝖈𝚑ｉⓟ𝚎ｏ𝒂𝘥𝔶ℯ𝘴𝗍𝚢𝚌𝕞",
    "⒨𝐞𝐲𝗓𝕓𝓯𝙩𝙝𝐟𝗌𝓵ｄ⒫𝑐𝕡𝖼𝐧𝕕𝚞ｓ𝖟𝒂𝖌𝕩𝘥𝑘𝔦𝒽⒯𝒕𝖞𝕧𝗂𝘴𝚑⒧𝕩𝘆𝚜ⓞ𝓫𝓽𝙙𝓬𝕓⒧𝘇𝗺𝗊𝔴𝙨𝔮𝖏𝘴𝚣𝐞𝚙𝘨𝕫𝖙𝐢𝙙𝔴𝖐𝖞𝐲𝘴𝒒𝒾𝒒𝓳𝚓𝕛ｄ⒫𝙙𝕖𝔮𝒅𝓇ｙ𝙢𝔷𝔧ｖ𝘭𝓶𝗊𝘩𝖘𝑞𝔣𝚑𝕥𝖖𝑠𝓯𝘫𝐣ｍ",
    "𝐚𝘵𝑝𝔣𝙫𝔂𝚒𝗀𝘷ｏ𝓀ｏ𝐬ⓤ𝓲𝔁𝙧𝗺𝚍ｓ𝙡⒝𝙡𝖾𝓀𝓯𝙭𝙛𝓯𝖓𝓶𝕦𝓭𝖞𝑚ⓤ𝑡ℯ𝓋𝓊𝐱𝖻𝐞𝘹𝘢𝕙𝙙𝗃𝘴𝕨ｚ𝓶𝕤𝒗𝖛𝑚𝚍𝙧𝙛𝙫𝑦𝗆ⓤ𝓾𝓂𝘶𝚐ⓚ𝐳𝐭𝘱𝘥𝐞𝑏𝑠𝔭𝖻𝐨𝗽𝓼𝙣𝙙𝗰⒥𝚝𝖉𝑤𝘫𝔲𝕗𝘸𝓍𝔵𝙜𝘵𝖟𝑔𝕡ｃ𝕖",
    "𝗂ｙ𝚋⒡𝓼𝔩𝑗𝕟𝖎𝕔𝗽𝖗𝕛𝘪𝕓𝒑𝔯𝑏𝕠𝘂𝕟ⓛ⒭𝖺𝘪𝕖𝓉𝐯𝐰𝓸𝘷𝙚𝒐𝔵𝒍𝓮𝘃𝑖𝕩𝙖𝕝𝓇𝙛𝒻𝓿ⓚ𝘁𝖌𝖔𝓎𝗈𝒸ⓑ⒳𝗉𝑤𝚢𝕧𝔢ⓢ𝚒𝐥𝕟𝙗𝚟𝑥𝒔𝘀𝘰𝒆𝗊ⓙ𝘮𝓹⒤𝗲𝒶ｔ𝑑𝘶𝐞ℴ𝕩𝐠⒯𝗄𝓏𝘻𝓰𝖝⒬𝓉𝕦ｋ⒳𝙧𝔩𝕨𝖓ｒ",
    "𝕕ⓥ𝒷𝖑ℴ𝘷𝓭ⓩⓐ𝙛𝖝ｃ𝚌𝓾𝐛𝘹𝑣𝖟𝔰𝗺𝕨𝘯ｏ𝗏𝐧𝚘𝒎𝓪𝘸𝗐𝖚ｗⓔℊ𝒈ⓜ𝕩𝐰𝖝𝗼𝑦𝑑ⓚ𝖐ｆ𝓽𝕠𝒔ａ𝐣𝔀𝔱𝙙𝔡𝓂𝙠𝖏𝗶𝕖𝓼𝙖ⓡ𝔫𝓶𝗐𝑑𝐚𝑎𝓇𝙜𝗇ⓓ𝐞𝘧𝒽𝙝𝖻𝖿𝘢𝔀𝗾𝗼𝒖ｉ𝒏ⓕ𝘮𝔩𝙜𝐛𝕨𝐱𝗃𝘁𝑒𝖺𝔷𝔤𝓊𝐤",
    "𝓿𝙩𝖛𝙢𝓏𝑖⒦𝖇𝚜𝒿𝚊⒮𝐧𝚏𝗉𝖻𝒂𝕛𝐳𝕜𝘅𝖝𝗂𝘂𝑤𝐜𝕛ℊⓛ𝕓ⓛ𝐭𝓊𝗱𝐫𝘫𝕚𝓍⒫𝐡𝑑𝖋ⓠⓔ𝔯ｄ𝕩𝙮𝔪𝙟𝖙⒫⒥𝑎𝕚𝙟𝘦ⓨ𝙮𝒑𝗸𝓶𝒌ℎ𝔷𝐱𝒍𝗌𝐪𝗀𝗯𝒈𝗵𝖼𝐧𝗅𝔥𝚡𝙞𝓮𝒾ⓠｃ𝘇𝘩𝕚𝕠𝔲𝑖⒪ⓡ𝘯𝔢𝕤𝙤𝙤⒱𝘦𝔥𝔰",
    "𝒛ｖ𝚓𝑗𝓌𝚖𝕡𝓃𝚌𝕢𝙣𝚔𝒘𝘹𝓆ℊ𝖒⒴𝔷𝗇𝓻𝒑𝖺𝐧𝚛𝓽𝗃𝖚ⓗｑｆ𝖇⒱𝘧𝒖𝘮𝘨𝗀𝕔𝖼𝑤ℎｋｉ𝑖𝓹𝖈ⓤ𝚕𝔥𝒾𝒌𝘸𝔧𝘀𝘧𝗿⒢ⓟ𝚒𝓇𝓌𝕖𝗾𝘧𝔰ｕⓔｈ𝘬𝙢𝒶𝐢𝖿𝓋𝔡𝓵ⓠ𝚢𝓃ｋ𝘶𝐭ｏ⒢𝚍𝙥𝗅𝕨𝙛𝒏𝐣𝓸𝗃𝚒ⓑ𝐝𝘶𝘰𝓌",
    "𝘂𝚠𝗷𝕠𝘁⒡𝘂ⓐ𝖆𝖖𝒽𝕤𝑧𝖇𝗓𝑒ℎ𝒔𝖻𝓪𝑜𝒅𝚗𝙯𝗶𝐯ｐ𝘫𝕗⒡⒝ｚ𝙢𝓽𝓯𝗄𝘆𝗼𝚍𝖝𝒆ｍ𝓽𝐨𝔷𝘤𝓇𝔂𝘥ⓣ𝗍𝚙𝓯𝓸𝗓⒟𝖽⒰𝕢𝗇ｄ𝒶𝚏𝔪𝘰𝙯ｏ𝒾𝗇𝓲𝓈𝔳ⓒⓚℴ𝚏𝗽𝚗ⓣ𝕓𝔫𝚍𝘨ⓨ𝔠ⓞ𝐤𝙟𝚖𝓍𝘫ⓧ𝑐𝘹⒫𝚡𝒗𝗓𝚐𝙗",
    "𝔁𝓎𝔧𝚖ｊ𝖒𝖛𝓱𝖜⒢𝒽ⓡⓣ𝓷𝐜𝒒𝐝𝔵𝓾𝔥ⓞⓞ𝒶𝚚𝑑𝐧ｕ𝗎𝘹𝘯ａｑ𝒸𝓎𝐮𝗇ｅⓐ⒝𝙨𝚡𝕛𝔴ｅ𝔣𝗺⒯𝖌𝓊𝐢𝙨𝘱𝖑𝕡𝕔𝖞ⓔ𝔮𝙝𝖛𝔷𝑧𝗍𝓮𝐦𝐢𝚑𝒾ｙ𝖟𝐛𝐬𝖝𝖐𝑚𝘤𝓬𝗼𝔧𝖺𝘧𝗶𝒖𝓰𝔲𝚕⒫𝔀𝖾𝖾𝘇𝙟𝗏𝕥𝒎𝖒𝚣ⓩ𝗵𝕒",
    "⒳𝓻ⓥｒ𝐪𝗇𝖊𝙪ｗ𝑤𝗃⒣ⓢ𝑏⒥𝘀ｅ𝘥𝓴𝐚𝚢⒰ⓡ𝙠𝚐𝖔𝓂ⓖ𝔬𝖌𝑧𝔶𝒋𝙧𝗸ⓥ𝗈𝓏𝓸𝒄𝙮⒤𝑑𝘩𝔡𝚞𝚐𝔞𝖗𝒎𝕨𝓊⒢𝔂𝔥𝒚𝚛ｇ𝓏𝗊𝙯𝖜𝕪⒥𝑛𝓋𝐨𝒐𝗂𝙠𝕠𝒽𝗄𝚏𝓶𝒙𝚑𝘲𝔪𝖐𝓊𝐤𝔠𝓭𝓀ｉ𝓭𝔨𝙚𝓎ⓣ𝔠𝘄𝓻⒦ｚ𝒈𝙚𝒷𝑎",
    "𝖼𝙘𝚏𝖎𝑓𝗹𝘮⒟𝒛𝕫𝘀ｆ𝕞𝖔𝔠𝘪𝔵𝚚𝕔𝐤𝑒𝖞𝖻𝖾𝙙ｈ𝙯𝗁𝙬𝗴𝘱𝗒𝙞𝚚𝚒𝖈𝓱𝔣𝕠𝖎𝑙𝙨𝚟𝑧𝕧𝐛𝖐𝘵𝗓ⓨ𝘮𝒊𝔤𝘹𝗈ℎ𝕟𝘴𝖛𝒔𝚠𝚢𝙦ⓔ𝘫𝖋⒥𝒎𝙘𝒋𝙙𝔶𝚡𝐦𝖍𝓊𝘥𝖻𝐠ｊℴ𝗻𝗅𝚍𝗃𝑧𝗸𝐜⒮𝕨𝙮𝖑𝐢𝘦𝕞𝑥𝙦ｋ𝐦𝚑",
    "𝗄𝔞𝓋𝓌𝙟𝔬𝖈𝐮𝓻𝔩𝐪ⓡ𝓃𝚝𝘤⒟⒫𝙯𝓋ⓜ𝐱𝖺𝘬𝘳𝘇⒫𝐦𝐝𝒒𝒄𝐣𝗍𝓰𝔡𝗓𝐚⒥𝗎𝚎𝖏𝙩⒫𝚗𝔯𝓯𝔧ⓒ𝔰ⓝ𝔢ｚ𝗰𝗆𝙣𝗆⒭𝓵𝘹𝓃𝗓ⓛｚ𝘰𝙛𝒋𝖌𝒃𝑑𝓯𝒋𝑎𝗃𝓫𝙖𝘆𝒶𝒿𝙤ⓗ𝖻𝖐⒢𝖊𝑝𝐡𝖜ⓔ𝒸𝕥𝖗⒦𝓏𝓂𝙨𝓻𝘷𝘧𝓪𝑓𝚗",
    "𝑐⒠𝐚𝒷𝒈𝔮𝔂ℎ𝓍⒟ｊ𝘢𝔥⒧𝙟𝖝𝘸⒩𝗳𝓬ｑ𝒋ⓑ𝗌𝔀𝘃𝖐𝚊𝔩𝗼ｏ𝖖𝗱𝑡𝘧𝙗𝚐⒡𝒻𝚎𝕙𝚡𝗈𝖼𝘦𝑤𝓳𝗉𝚎𝖼𝓴𝚊𝙠𝑖𝔞𝑒⒴𝗋𝒗𝗌ｑ𝓰𝓭𝓳ⓟ𝚋𝓱𝓍𝙥𝘀ⓔ𝑞𝒍⒵𝒑ⓡ𝓁𝙗⒜𝐮𝕓𝓎𝖈𝓈𝓳⒤𝓴𝓫⒬𝖻𝘢⒨𝕦ｄｕ𝒒𝑏𝖆𝘹ⓛ",
    "𝑓𝚗𝒶𝗺𝕥ⓘ𝓅𝐜ⓧ𝒓ｍ𝐣ⓑ𝓰ｉ⒧𝚗𝘮𝙥𝘧𝖾𝒘𝚖𝚜𝐫𝚚⒧𝓷𝕣𝒉𝗓𝚒𝚢𝑙𝓀⒳⒴⒧ｆ⒨𝐰𝒓𝑎𝒽𝒷𝘫𝕟ⓦ𝒗𝐚𝘨𝔶ｃ𝓆ⓠⓗ𝕗𝙜ⓐ𝙗ⓚ⒝𝗿𝙘𝚌ｎ𝗐𝘵𝓾𝑔𝓶𝚙𝙮𝒓𝗆𝔶𝔠𝙫ℴ𝘬𝒐𝘀𝔵𝕢ⓗ𝕧𝙦𝗾𝔀ｆ𝙣𝗎ⓞⓣ𝕠𝙘𝓿𝘫𝒌⒪",
    "ｅ𝙩𝓀𝘧𝕦𝒒𝔵𝗂𝓸𝓇⒮𝖾𝙣𝚠𝚝𝙦𝘺𝕦𝘯ⓔ𝙢𝐬𝚝ⓕ𝚌𝗹𝕫𝔡𝓷ℊⓗ𝕔𝘩𝘸ⓜ𝑦𝖌𝒉𝙭𝙣𝕕𝗏𝔂𝒆𝒐𝕜𝓌𝓶𝔰𝚠𝕝𝔷𝒇𝙯𝘇𝑟ⓣ𝔷𝗄𝖘𝑥𝗰𝕘𝒍𝚜𝚢ⓕ𝕙𝘩ⓧ𝔱𝗾𝙢𝖜𝒄𝔂ⓣ𝒻𝑏𝔬𝕪𝘭𝘶𝒂𝗵𝐢𝔢𝑛ⓠ𝙠𝖽𝗄ｅ𝘣𝕡𝗂𝕩𝐱𝚒𝒊",
    "𝕤𝘨𝙗𝗄𝙨𝓬ｌ𝘹𝔵𝔀𝐯𝕠𝘂⒢ⓤ𝒘𝗀𝖞𝕩𝓪𝕧𝑣𝒌𝓌𝒍𝘣𝕕𝖝⒫𝘢𝗶ⓧ𝖗𝗓⒴𝗁𝖍ⓙ𝚟𝐝𝘧𝔥𝗓𝖛ｍ𝘄𝗐𝖘ⓑ𝒷𝗄𝑡𝗈𝓂ｘⓨ𝑜𝚣𝖛ⓛ𝕧𝔩⒰𝙥𝔟ｘ𝖔𝔠𝗺𝖏𝓊𝚚𝐟𝙮𝘄⒧𝚖𝖼𝐰𝓻𝐡ⓤ𝖚𝖿𝔃𝘫𝒏𝕥𝔰𝓮𝚖𝑧𝗳𝓃𝙧𝘳𝗀𝘶𝚌𝔲",
    "𝐛𝙜⒤ｘ𝐬𝕒𝖉𝙤𝐲ⓝ𝕓𝐫ⓟ𝓆𝑠𝑒𝘵𝕗⒱𝗿𝔶𝘁ｖ𝗁𝗐⒵𝘥𝘲𝘳𝒙ⓕⓗ𝒷ｂ𝓇⒯ⓧ𝑎ℊ𝚠𝒈ⓔ𝗯𝓅ⓖ𝐜ⓝ𝚢𝘸⒜𝒻𝖈ⓟ𝙨𝓭𝓴ｓ𝕟𝕠𝔂𝒆𝖆𝒃𝔦𝘇𝕛𝔥𝓮𝗆𝖆𝒄𝗹𝒋ℯｅｎ𝐠𝐭ｂ𝗷𝗱𝓫𝗇𝚘⒢⒝𝖿𝙛𝓾𝓳𝘇𝙠𝘤𝘫𝘫⒲𝗓𝖘𝐝𝘂",
    "𝔱𝗾𝕪𝒆𝗱𝐤𝚎𝕤𝙢𝙦𝐜𝘃𝔪𝓸𝒌𝚝𝗋𝒊ｂ𝒃𝒔𝓵𝗍𝓺𝘶𝙡𝐮𝚣𝙢𝑗𝗑ⓘ𝙚𝙫𝓆𝕟𝘩𝖈𝚟𝗯𝒑𝘦𝓂𝔃𝖏𝗲𝕚𝔞ｊ⒜⒲𝚑ⓘ𝓆𝑎ⓠ𝕝ｊ𝚔𝓪𝖒𝘫𝒓𝒾𝙩𝚋𝔰𝖙𝙧𝐝𝙢𝔱𝕜𝙞𝘰𝑘⒳𝐡𝓅𝑚⒰𝕫𝗼𝑒𝗅𝔰𝓽ｇ𝗵𝖋𝗷𝗿𝚘𝐤𝘧𝗲𝖕⒮ｐ𝑜",
    "⒨ｊ⒰𝓪𝖒𝕠⒟ℎⓙ𝘤𝖓𝘴𝔯𝘴⒡𝖝𝓊𝙘𝙡𝚢𝑟𝘭ｉ𝒌𝗶⒡𝔃𝚟𝗉𝑜𝚋𝖟𝐩ⓥ𝒆ⓖ𝑟⒧𝒌𝗸𝙜𝓴𝓹𝗐𝖾ⓨ𝕣𝗴𝘺ⓛ𝗂𝗏𝓭𝑚𝚍𝑜𝚞⒮𝙧𝐫𝓂𝚚𝒻ｖ𝒿ⓜ𝑒𝘫𝓯𝖏𝘱⒫𝗄𝖋𝒽ⓥ𝙣⒳𝓫𝑞𝘄𝗶𝑞ⓖ𝗂𝙝ａ𝗆𝙬𝗓𝙫𝓏𝑘𝐢𝙙𝑔⒬𝔬𝘻𝖌",
    "𝙯𝗂𝖼𝒋𝖗𝖗𝖈ⓚ𝑧𝕢𝕚𝒸𝖚𝕦𝔟𝚠𝘹𝗆⒪𝒙𝘥𝑡𝐪ⓩ𝙭𝖘ⓩ𝖋𝒷𝗷𝗑𝒒𝗼𝑖ｏ𝘵𝐭⒞ⓖ𝐢𝗎𝒘𝗋ｊ𝒑𝔢𝖔ⓧ𝙡𝘶ⓧ𝙨𝒍𝗋⒱𝗮𝖏ⓩ𝘣𝐛𝑟𝒄𝑔ⓘ𝓇𝒒ⓟ𝘅𝖒𝘺𝚛𝑛𝖎𝑑𝒹ｏ𝘳𝙨𝙝𝙨ｆ𝗅ⓗｑ𝘁𝖼𝖍ｘ𝙞𝗄𝗯𝗳𝗎𝚕𝖇𝗌𝒅𝔨𝑎⒣",
    "𝗱ⓚ𝖑𝔀𝑏ℎ𝖐ｂｎℊℊ⒟𝓾𝓆𝘀𝑘𝙨𝕕𝗿𝓊𝓳𝑢𝗌ｌ𝔨𝘱𝔯𝓾𝑎ⓝⓧ𝚘𝖙ℎⓤ⒤𝐤𝖍𝚊ｅⓣ𝐰𝑐ⓖⓣ𝘰𝓅𝓁𝙗𝙞𝖗𝚘𝙙𝖐𝙮⒪⒪𝔮𝗱𝙥𝔫𝕣𝖽𝑤𝚛𝒿𝘇𝒻𝘯ｑ𝐦ｉ𝕪𝖿𝗿𝓳𝒏𝓋𝓈𝑏ⓖ⒣𝔮𝐦𝘅𝗮𝗈𝘂𝔷𝒎𝖍𝘵𝔨𝖜𝘣𝐬𝑟𝒓𝑚𝒒",
    "𝘫𝘪𝐪𝘪𝙘𝕘ｅ𝗲𝘂𝖆𝓍𝖔𝗓ⓛⓣℎ𝕙𝒍𝒐𝗺𝗂𝔷𝕛⒜𝔃𝚏𝓲⒯𝒽𝖙𝓺𝕦𝒑𝒐𝘆𝚊𝐬⒴⒲𝖇𝗓𝖈𝙥𝑘𝘤𝗶𝗲⒧𝔁𝘂𝔴𝑚𝚘𝚗𝑙𝔯𝘱⒤𝗎⒞𝐡𝗴𝓵𝚙⒨𝑙𝖊𝖒ｃｓ𝒽𝒚𝓰⒠𝕗𝗳𝕟𝖑𝓰𝚋ｑｎ𝒋𝔀𝘅ⓒ𝒐𝓴𝘤𝗉𝗃𝗅⒟𝙢𝚗⒲𝖟ⓧ𝒸𝗸",
    "ⓑ𝓴𝑐𝖔𝕨𝚣𝓯𝖙𝕟𝙩𝓋𝚊ｙ𝖗𝙜𝙜𝖿𝘨𝒂𝙙⒢𝙬𝚑𝘰𝖜ｚ𝘀𝓅𝕓𝐭𝒏𝕓𝙟𝖽⒞𝖽𝗼𝓍𝖿𝘨𝖙𝓎ⓟ𝖒𝓏𝕨𝓅𝖔𝐛𝖽𝔤𝔁ｏ𝘦𝒐𝓳⒢⒴⒡𝕜𝒶𝚎⒬𝓾𝓸𝔣𝚌𝖘𝖎𝓻𝓉𝓋𝕘ⓘ𝗷𝑤⒟𝔳𝙮ⓦ𝐭𝑎𝕜𝑡𝒚𝑦𝗻⒝𝕜ｆ𝖊𝔰𝖕ⓛ⒢ｓ𝐯ｘ𝓰𝑜",
    "𝘧𝘸ｅ𝔃𝐟⒭𝑚𝘵ⓟ𝕤𝑖𝔨𝒽𝗋𝘸𝒛𝑏𝗎𝔂𝐡𝑥⒱𝖝𝘧𝖻𝘭ⓓ𝓹𝔰𝙠𝑡𝓷ⓓ𝔱𝙘𝑐⒢𝔩𝔰𝒽𝘫𝓀ｎ𝕣𝓳𝙢𝙨𝘵ℴ𝙙𝑥𝑜𝒈𝐦𝔣𝘶𝒗𝔣𝐳𝚕𝘷ⓘ𝕓𝑟𝔡ⓤ𝚜𝐩𝚛𝚌𝗹𝐠ｈ𝑦𝒌𝚗𝚍𝓹𝐢𝗽𝖗𝖜⒲𝚔𝐤𝔷𝒚𝖎⒳𝒸𝑔𝕖ⓥ⒜⒴𝚎ⓚⓥ𝕥𝗮",
    "𝕥𝗎⒣𝔁𝔂ⓩ𝐰𝒂𝐟𝑚𝐢ｂ𝒘𝒔𝓆ｏ𝔳𝚓⒬𝕤𝑏𝒃𝖕𝒒𝑑𝗄⒳𝑑𝗶𝓭𝓮𝖖ⓙ𝑎𝕛𝘨𝚡𝔰ℎⓐｑ𝙦𝚖⒤𝒾ｍ𝘸𝗀𝒇𝗌𝓰𝘧𝑣𝗏𝚓ｑ𝕩𝘳⒞𝐞𝔴𝙭𝘸𝙧𝑢𝕠𝘇𝓇𝓲ｎ𝘄𝒕𝗊⒥𝑠𝗄⒳𝒘ℴ⒥⒩𝕚𝑐𝓱𝓯𝘄ａ𝖛𝖇⒴𝐯𝓼𝑝𝕣𝗍𝕨ｖ𝙦𝗆𝐬",
    "𝓀𝙝𝚙ⓑ𝕩𝗸ⓥ⒝𝑚⒜𝒊𝓱𝑞𝓺ⓩ𝗷𝚙⒤𝙡𝕞ⓑ𝗂⒯𝖑𝚚⒬ⓤ𝚙𝚓𝐲ｖ⒝ｓ𝙘𝚠𝑏𝘶𝒻𝓳𝗃𝘪𝘣𝐛ｖⓣ⒤𝐰𝗲ｐ𝓺𝔧𝘱𝔧𝚞𝒛𝓎𝚊𝐨𝓈⒥𝖞⒥⒠𝖐𝘦𝒏ｍｙ𝖼𝗅𝖉ⓥⓗ𝙖𝓁𝚙𝔴𝐫𝖈ⓣｏ𝑔𝓁𝚘𝚘𝙗𝓾𝙜𝒊𝖍⒢𝘩𝑥ｎ𝓵𝖙𝑒𝐲𝓽𝘻",
    "𝗶𝖉𝐥𝓶⒵𝖖𝚏𝙥𝑘ｎ𝑦⒠ⓗ𝔡𝓅𝔵𝕜𝘰𝘇𝘃𝓁𝔫𝕒𝙘𝒿𝙙𝑦𝗁𝑓𝚘𝑧𝗽ｇ𝘂𝖈⒧𝕒𝒻𝘯𝙤𝒻𝘮𝓷ⓧ⒢𝘀𝗳𝐠⒳𝗶𝓊𝓈𝕛𝑠𝒎𝓶𝗉𝓏ⓣ𝓿𝔧𝓏𝔪𝗓𝗴𝗃𝗒𝘫𝓭ℊ𝐡𝑙𝖏𝙭𝗸ℊ𝙧⒬𝚍⒢𝗃⒩ｆ𝗓𝓊𝑚𝙬𝗒𝘦ⓕ𝔱ｍ𝐮ⓞ𝖐𝒗𝓸𝓴𝙫⒱",
    "𝐪𝐮𝖖𝓼𝚖⒩ⓦ𝘺𝓂⒟𝒹𝓲𝚟𝙜𝘆𝙠𝐣𝗴𝑞𝔂𝚘𝘆𝗃𝔭⒬𝑡⒳𝒄𝓽ｉ𝘷𝗌𝚞𝔶𝗇𝓮𝐱ℎ𝚗𝓎𝚊𝔶𝖐𝐨𝐡𝓏𝓈𝓹𝗰𝓷𝒽ⓓⓖ𝘂𝐲𝗴𝖊𝕚𝑘ⓤ⒞𝖋𝗾𝑣𝑡⒲ｔ𝕝𝒋ⓜ𝚞𝕖𝔷⒯𝐮𝒂𝚞𝘯𝑜𝘂𝕙𝚒𝚊𝐛𝙢ℊ𝖊⒳𝚑𝒋𝚐𝔡ℎ𝓶𝖎ｗ𝕟ⓢ𝔩⒵",
    "ℊ𝘄𝑥𝘻𝙚𝘴ⓛ𝙭𝓀𝓰𝓵𝒛𝑓𝓉𝖽𝗅𝖕𝙚𝙪ⓠ𝚞ⓧ𝗺𝘇𝗾𝘃⒬𝘦𝓿𝐧ⓖ𝘅𝕡𝕕𝐯𝑝𝑛𝘀𝕥𝚊𝑙𝗒𝔯𝖒𝐞𝕗𝕖𝑑ｗ𝘴𝒹𝕡𝙢𝓵𝓏𝒃𝑔𝐮𝚊𝑥𝖇𝚚𝚜𝙬𝔥𝘢⒫𝙗𝗰𝙨𝗆⒩𝕪𝖙𝓃𝓽⒰𝒃𝗸𝚐𝓳𝚔𝔵𝔂𝒗𝖜𝘂𝙟𝑠𝗵𝙤𝗶𝚚ｆ𝘇𝔭𝖛𝔦𝓋ⓐ",
    "𝚘𝔮𝐭𝐬𝐧𝐮𝚓ｆ𝒊𝕦ｆ⒞ｄ𝒷𝚘𝖘𝕒𝗇𝒷ｇ𝔲ⓨ𝒕𝖛𝘪𝒂𝕣ⓦ𝑑𝒒𝙧𝐱𝐚𝖊ｚ⒣𝓼𝚡𝔴𝖎𝘷𝓃𝗾𝚕ⓙ𝖼𝙞𝐱⒣⒞ｐ𝓪𝔠𝘁⒠𝖚𝔦𝑛𝚗𝒅𝖜𝚍𝒻⒡𝖇𝔪⒳𝕕𝗹𝓬𝒅𝔣𝓯𝔨𝕫𝗊𝔶𝙬𝙮𝒓𝒏𝔳𝗃𝒆𝓯𝒻𝘰ⓨｖ𝒊ⓑ𝕓𝒾𝙘⒢𝙛𝑚𝘲𝔟𝗇",
    "𝙝𝕜𝖇𝒋⒮𝘤𝓉𝓍𝐦ｂ𝗁ⓘｖ⒫ⓩⓠ𝘣𝐣ｍ𝖗𝗄𝐳𝗻𝑥𝐮𝖊⒯𝔶ｘ𝙝𝐠𝖽𝒉𝒐𝔮𝓌𝙟𝕖𝑘𝚘𝘶𝔬𝗸𝓈𝚔ｖ𝐭𝓋ⓤⓔ𝒆𝚛𝓃𝘻𝘴ｈ𝕦𝐮ｄ𝖖𝕠𝚞𝚙𝚟𝚠𝓂𝗆𝓬𝗄ⓩ𝔞𝐰ⓓⓢ𝒉𝙖𝘣𝑛𝘀𝑟⒪𝖺𝗐𝒈𝓪𝑚𝗀𝖈𝑚𝚐ｆｑ𝖐ⓧ𝗾ⓛａ𝓇𝘫𝗯",
    "𝑤𝒘ⓣ𝔳𝐧𝚢𝒶𝔳𝚒𝘵𝘲𝗎𝘃𝖟𝕨𝖑𝔮𝑚𝚌⒝𝖎𝖊𝚟𝙗𝕡𝘄𝗁𝔤ａ𝙤ⓠ𝗇𝕗𝐨𝔬𝕞𝐟𝑣𝔧ⓜ𝑣𝚒ｒ𝖈𝒖ｍ𝚊𝓫𝑜𝚙𝒅𝚊ｇ𝖍𝒙𝚐ｙ𝕝𝐩𝗂ａ𝐝𝓬⒮𝐲𝑤ℊ𝗆𝓁𝙪ｇ𝖞𝑑𝖟𝘺ⓙ𝙞𝘥𝕪𝘄𝗰𝔫ｈ𝗏𝔣𝕡𝖞𝒍𝓫⒨𝑧𝘩𝙡𝓸𝘮𝓲𝖇𝕛𝘮𝐯",
    "⒲𝒶𝐥ｏ𝐤𝘷⒤𝗏𝘆𝓯ｅ𝙮⒱𝗂𝑚𝓆𝖖𝒛𝗺𝖙ｕ𝐠ⓚ𝑡𝕕𝖕𝕤𝑖ｍ𝘧𝒶𝙩𝙡𝒕𝑜ｗ𝙬𝒕𝘦𝖉𝕥𝐛𝖐ⓢⓘ𝙚𝒶ⓝ𝗶𝑜ｓ𝒻𝓵ⓥ𝖏ⓥⓝ⒣𝑦𝕤𝘨𝓋𝚢𝙞𝖇𝚘𝘩𝘻𝑘𝔳𝚝⒯𝙤𝒊⒤𝐨𝚖𝓭ｉ𝐰𝔴𝑟⒨𝙘𝓺𝙖𝓍𝔮𝓬ℊ𝘪𝕩ⓕ𝚒𝔂ｑ𝕣𝓷⒰𝔶",
    "𝗷𝗏𝙤⒞ｂ⒟𝐫𝓁ⓝ𝒸𝔱𝘮𝐛𝗻𝐢𝖗𝘮𝑤𝘶ｊⓨ𝐚𝒔𝒻𝒕𝕡𝓂𝒋𝒍⒩𝐡𝗻⒤𝒊𝔣⒤⒢𝚊ⓩ⒢𝚠⒟𝚍𝕢𝖜𝑛𝖝𝗄𝘯𝗉𝖒𝕪𝔁ｎⓜ𝒷𝑑𝖾𝗊𝗻𝚢𝕤𝚜𝘤𝐪ⓡ𝖑𝓲𝓪𝕧𝖙𝓮𝕔𝚣𝚠⒟𝐱𝗾𝗂𝐦𝔱𝑗𝖑𝒆𝗐𝗊𝑠𝕖𝐮𝚓⒝𝗲𝒗𝔠ⓚ𝐡𝚢𝙨𝒛⒤",
    "𝙭𝗑𝚕⒢𝖙⒲𝙘⒥ⓥ𝓎𝕓ｐ𝗏𝐝𝔂𝒌𝒊𝕝𝖌𝐲𝒇𝙤𝗍𝑔𝗄𝒙𝕗𝖎𝓋𝔩𝑧𝓌ⓘ𝔧ｎ𝘵𝒐𝘰𝒌𝒄⒵𝘬𝘥𝖚𝙖𝚕ｒ𝐠⒞𝔢𝐪𝗌𝓪𝒆𝓷𝘱𝕧𝚛𝗇𝕧𝖛𝕛𝓆ⓙ𝑔𝕕𝙧𝓁𝙣𝘧𝖞𝔁𝕦𝘪𝓃ｅｏⓟ𝐜⒥⒰𝘄𝙙ℯ⒠𝐨ⓡ𝒔𝕝𝐲𝓲𝓰𝕣ａ𝔭𝖕𝓋𝔦𝚚𝖞",
    "⒝𝗋𝘩𝑓𝗰𝘪𝒻⒥𝔠𝚢𝐣ⓚ𝒶𝐯𝓰𝒈𝖗⒭𝕢𝒐ⓕ𝕘𝒖𝔤𝕩𝑟𝑝𝒉𝔃ℊ⒦𝓇𝘂⒫𝘬𝒈𝒐𝙗𝙡𝓼𝒎𝓂𝔮𝚕⒩𝕞𝗾𝗁𝐫ｚ𝘦𝑤𝖘𝗓𝗈𝐟𝘷𝗼𝖛𝓹𝖽ⓒ𝘯𝘁𝚢𝘢𝙡𝖍ｍ𝕨𝖜𝗀𝙝𝒷𝔞𝔧⒠⒴𝒕𝒅𝗺𝗯𝓵𝗒𝚍ｂ𝓎ｎ𝑏𝘹𝔁ｑⓛⓣ𝔬𝓷𝒿𝘫ｊ𝖛",
    "ａ𝗿𝗃ⓧ𝖔𝗽𝔵ｈ𝓾𝙜ⓗ𝔩𝙘ｍ𝙥𝘁𝘵ℴ𝔱𝒋𝑞𝚜𝒛𝙞𝔬ｌ𝕦𝗉𝗸ｌｖⓚ𝖎𝖕𝕘𝕙𝕝ⓠ𝚘𝐫𝚎ｅ𝘵ｎ𝓿𝓴ｃ𝖉𝗀⒝𝓃𝐠𝙚𝖏𝘅𝐬𝓲𝕔𝚗𝑙𝓂ⓚ𝖋𝚊ｌ𝔱𝙞𝒍ⓓ𝒎𝗆𝘭𝗼𝒷ⓗ𝗂𝐢𝓰𝑣⒞𝗾𝓵𝑦𝘺𝖈𝖝𝙪𝗴𝗶𝖌𝐯𝓹ⓝ𝐧ｂ𝕧⒣𝕨𝒔𝐦",
    "ⓔ𝙬𝙭ａ𝘀𝚔𝚍𝒎⒟ⓔ𝓲ⓡｅ𝙪𝔬𝔮𝒊ｇ𝚝𝙘𝐝𝓸ⓖ𝒋⒳𝒂𝙚𝕙𝕦𝔦ｅ𝓸𝔫𝓎𝗂𝗀𝚖⒱𝐜𝐭𝑚𝑛ⓧｊ𝘤𝒎𝕛𝓆𝙙ⓢ𝓶ⓒ𝘤ℎ𝔟ｊ𝙞𝖽𝗃𝖽𝐟𝘂𝕪⒜ｓ𝖕𝒖𝓬𝗎𝗴𝒆𝘻ⓞ𝘂𝘆⒨𝐤𝙙𝗿𝒊𝘂𝚝𝐧𝔢𝖗𝒔𝒌𝔰𝙙𝑥ｆｔ𝕣𝓺𝘷𝑤𝒛ⓜ𝚡𝓃",
    "ｗ𝚊𝙩ｘⓓ𝐦𝐛𝗯𝗑𝕫𝘭𝗶𝓿𝔵𝔨𝒾𝘁𝓏ｂ𝘭𝚐ｋ𝕢𝗑𝐚⒪𝑚𝖞𝘬𝔃𝘂⒟𝐩𝔞𝕜𝑧ⓖ𝚚𝑞𝖘𝚊𝓇𝔢ⓓ⒮𝙤ｒ𝚢𝐭𝒑𝗸𝔫𝗾⒪ｇ𝒓𝕖ｙ𝙠𝑔ｏｓ𝑥𝔳𝐰⒳⒟ａⓜ𝓿𝗾𝔠ℊ𝓷𝑓ℊ𝒏𝗀𝔫𝔞𝒍𝐯𝑒𝙞𝗌𝑘𝖑𝗒𝕔𝓈𝙤𝘀𝒄𝘺𝒽𝙝𝘦⒫𝑚𝒇",
    "𝖌𝘶𝔡ｉ𝘮ⓐ𝑒𝔃𝘂ⓠ𝔮⒴ⓘ𝖌𝗯𝗱𝘀𝕢𝚠𝖌⒫ｊ𝑞𝚔𝖙𝚚𝗄𝐲⒨𝑑𝘩⒫𝓼𝘬𝐪𝓶⒳ｗ𝘢𝙘𝖙𝕚𝘲𝙥𝔟𝘫𝔢𝐭ⓗ𝚖𝚙𝗋𝔫ｄ𝙣𝘶𝙭𝓍𝒿𝐭𝘃𝗎𝘀𝐟ⓝ𝕜ⓜⓑ𝕠ⓤ𝗌ｚⓣ𝙤𝚛⒭𝒏𝒔𝔞𝗑𝗿𝗴⒡𝓉𝔦𝗺𝔂𝙬ｉ𝖆ｕ𝐚𝙨𝖐𝗮𝓽𝗹𝒏𝔟𝙥",
    "𝗵ⓠ𝘂𝐤𝓇𝗓𝐥𝙡ｍ𝘵𝚕ｎ𝚟𝖚𝙠𝓂ｏ⒭𝑧𝒶𝗆𝔰𝓿𝗲𝔭𝖜𝓁ｋ𝐪ｘⓟ𝙞𝙗𝓬𝗻𝒌𝑔𝔫𝓾ｎ𝚑𝑢𝒏𝗑𝚡𝘩𝚎ℊ𝕦𝔧𝔳𝖏𝒑𝖑ｏ𝗻𝗽ｈ𝑙𝙜𝓴𝘳𝚡ｔ𝐣𝙟𝐜𝓮𝒘𝓎𝒹𝗽𝚐𝕛𝕟𝔲𝕩𝖑𝖽𝓀𝔳ⓨ𝗎𝓋𝐠𝑤ℎｌ𝑝𝖜⒥𝔁𝒑𝕗𝕓𝘴𝔳𝗊ｃ𝗓",
    "𝗁𝘥⒤𝒄𝖾𝑝𝑘ｉ⒞𝖙𝓽𝗼𝗍𝙩𝔧𝗺𝖝𝚡𝓉𝗺𝒉ｌ𝐝𝓉𝑞𝘪ｗ𝚢𝔬𝚢𝒑𝘮𝔀𝙛𝘴𝑎𝐪⒜𝗓⒩𝑔𝙫𝓏𝒅𝕣ℎ𝒂𝙧𝑎𝘪𝓴𝕣𝓺𝐚ⓓ⒧𝐫ｎ𝒏𝗍⒱𝖈𝕝𝔞𝘳ｉ𝐮𝑔𝖖𝗲⒥𝚙𝕕𝓪𝚔𝒔ⓝ𝕡𝖌𝙦𝒎𝐱𝗅𝘺𝓻𝖾𝙥𝖺ℎ𝒎𝖞𝚕𝙟𝕧𝗊𝗊𝓂𝑟𝚢𝔁",
    "𝐭𝓶𝙝𝚏𝓴𝗌⒝ｏｑ𝔃𝕕𝙤𝚑𝙙ⓜ𝒓𝖞𝐰⒳𝙝⒟𝘶𝚋𝖈𝖘𝐦𝘂ⓧⓤ𝔩𝖈ａ𝑜⒝ℯ𝗑𝘬𝗳ｅ𝚙𝚖𝖛𝕪𝔰𝕗𝔱𝕙𝒅𝔮𝒖ｗ𝙡𝒽𝗻𝐯𝖽𝘵𝘱𝘭⒴𝚒𝗱𝘳𝗸𝚎𝒆𝑦𝐩ｇ⒵𝙘𝚊𝔭𝖉ⓨ𝑐𝑑𝓱𝓆𝘣𝐣𝕘𝐲𝖈𝗻𝗂𝘯𝙪𝖺𝕥𝘺𝕒𝗯𝔯ｓ𝕗𝐬𝐯𝕧𝐳",
    "ⓑ𝐜𝒹𝗳𝗴𝒇𝚍𝒿𝗴𝗺𝘷𝔬𝗏ｐ𝑎𝖼𝙪⒯𝒐𝐜⒝𝗷𝔂ⓐ⒲𝐯𝖼ⓧ𝑝𝔠𝐝𝗑𝙢𝒶𝘤𝔮𝘻𝖑𝑣ｖｗ𝗄𝓿ｋｚ𝑦𝔧𝙩ｆ𝐫𝖺𝕠𝕚⒰𝙣ｙ⒜𝙜𝙢ⓣ𝚡𝒎𝕠ⓟ𝔩𝙪𝖐𝕙𝑎𝖒ⓚ𝖻𝙠𝕡𝓎𝙫𝕢𝐦⒦𝔰ｒ𝓼ⓡⓜ𝘀𝑘𝓸𝘧𝓇𝗀𝙩𝘴𝒄⒩𝗶⒬𝒔𝔤𝚔𝙢",
    "𝐳𝗾𝕘𝙚𝘪𝓳𝘭𝑔𝐢ℊ𝚊𝓴𝒘𝑥⒜𝔀𝖉𝔞𝖓𝒊𝔪𝑞𝔀𝗋𝘇𝒹𝔵𝖼ｇ𝐭ℴ𝖔𝗾𝑒𝚢𝘣⒩𝒷⒬𝙤𝚎⒨𝒊𝕧𝚙𝗌𝖐𝑗𝚋𝙩⒬𝘫𝒛𝗓𝓵𝗂𝑚𝒊𝕙𝚔𝓸𝘨𝐭𝑜𝗊𝔲𝑗𝓁⒜𝖍𝚟𝘫𝕪ⓗⓠⓔ𝗷𝘩𝖽𝗶𝓹𝕣𝖔𝔰⒫𝚓𝑐𝑢𝓯𝘅𝘰𝖐⒭𝙭𝖽𝑢𝘅𝖼ⓦℎ",
    "𝒉𝖔𝔩𝓿𝕚𝗴⒦ⓛ𝖞𝗵𝐚𝓬𝓂𝑡⒳⒮𝗍⒯𝔡𝗿𝚛𝖏𝐜𝕔𝗓⒰𝕧𝔬𝖻𝒊𝑗𝘁𝗹𝗒𝓿ｊ𝑟𝘲𝙠⒯𝚙𝚓𝑣𝚘𝕗𝒗𝐪𝔯𝗿𝕟𝓏𝑎𝗲ⓖ𝘻𝘬𝖽𝔵𝙪𝗉𝖇ⓟ𝖚𝒂⒣𝒛𝔯𝚋𝘰𝓿𝐢𝖿𝖕𝖻𝓋ⓐ𝒙𝘃𝓇𝗺𝔁𝔠𝘄𝗆𝗋𝚋ｚ𝚡𝖋𝑧𝔡𝓹𝓏𝓶𝕠𝙭ｋ𝒅𝐠𝘷",
    "⒩𝖊𝔂𝘆𝕜𝓾ℎ𝓅𝐥𝘂𝗼𝓼ｌ𝐣𝒉𝘁𝓷𝔟𝔪𝓅𝘲𝗄𝕛𝘴𝖜⒦𝓾𝒗ⓗ𝗇𝗵ⓕ𝘆𝗶𝚟𝗈⒬ｅ𝙤𝙢𝖽𝙥𝖛ⓡ𝘦𝐤𝓫𝘢𝓶𝗮𝓳𝒇𝖖𝔰ｌ𝗼𝐪𝖞𝗲𝔤𝗻𝖇𝖘𝔧ｃ𝘀𝙠𝓫𝗾𝐭𝓲𝙗𝕕𝘭𝕖𝒚𝒾𝘱ⓦ𝗒ⓜ𝔤𝓇𝖙𝒽ｆ𝐝𝗁𝕫𝘫𝐱𝚛𝘦𝔵𝙗⒯𝙫𝐭𝔶𝕝",
    "ⓕ𝓶⒞⒴𝒌ℯ𝒇𝐥𝕦ⓗ𝙙𝖛𝑦𝗽𝔪ⓤ𝒊𝓹𝑒𝓍𝗰ⓧ𝗀𝙮𝖆𝑔𝖚𝗂ｚ𝕔𝙭𝕣𝑤ｆ𝗂⒪𝓪𝚢𝓱𝚌𝗎ａ𝕜𝚓𝖿ｓ𝔠𝓎𝐧𝗰𝔢𝔡𝚓𝗉ⓠ𝓲𝙟𝑚𝗽ⓧ𝐜ｗ𝗯𝗓ｈ𝕨𝖌𝙬𝐝𝗌𝕫𝒖𝒗𝘳ａ𝒕𝔴ⓞ𝑦𝗂⒧⒩𝗈𝐛𝘤𝕖⒰𝗌𝖋ⓛ𝓿𝖟ⓨ𝔟ℴ𝓆ⓘ𝐰ⓒ𝔪",
    "𝐯𝗺𝘷𝕓𝔲𝔡𝙧𝖒𝕤𝓎ⓟ𝐥𝖕𝔞𝕙𝔰𝚒𝘦𝔴ⓣ⒮ｘ𝚢𝚐𝐟𝖘𝓫ｘ𝚋𝓽𝐚𝔪𝒂𝖿ⓢ𝑤𝓁𝕚𝚢𝔨𝑗𝓶𝙨ℎ𝕞⒣𝕘⒢𝕕𝔣ｂｂ𝗶𝘥𝓸𝘄𝘱𝒆𝑑𝒃𝗱𝕠𝚠ⓑ𝗎𝘥ｔ𝕔𝖇𝑗𝙤𝐝𝕫𝚚ｈ𝔁𝖇𝔲𝖝𝚐𝐟𝒋𝚕𝒘⒡ⓐ𝓿𝘮𝗐𝓲𝐩𝒿𝚑𝒆ℊ𝒇𝕜ⓘⓕｉ",
    "𝚎𝖇𝐡𝗅ｑｄ𝚜𝙜𝒕ⓦ𝓫𝙬𝗹𝘷𝒸𝘄𝗅𝓅𝚋𝖼𝖻𝒃𝚘𝔴𝕤𝘧𝚑𝚚𝚕𝚞𝓱𝓴𝓁𝖼𝘇𝑔⒪𝓮𝒄ℎｔｋ𝖒⒡𝗉𝚏𝖋ⓟ𝐰⒬ｂⓔ⒲𝘰𝗌ｂ𝔠𝒾𝐮𝓳⒠𝓂𝑡𝒈𝕣ℯ𝒗𝗴𝐜𝘶ⓐ𝓈𝔠𝘢𝚋𝖔𝒖ｕ𝐫𝔦𝑡𝐱𝒂𝘤𝖙𝖋ｅ𝙧𝗴ｉ𝖗⒜𝑠𝓎𝕕ⓐ𝗹𝒈𝑧𝗱",
    "𝚡𝓮𝖟𝔟𝐦𝔱𝗮ⓖ𝖿𝔱𝓵𝘷𝔲𝔪ℯ𝐯ⓟ𝒘𝐫𝗋𝕓⒭𝓷ⓒ𝑥𝚒𝚌ⓜ𝒽𝗻𝗑𝙯𝒾𝓱𝔭𝑎𝗽𝐰ｎ𝘅𝙗⒯𝗹𝖖𝗄𝖆⒢𝒸𝙛𝑙⒣𝘁ⓡ𝗄𝖚𝐪𝑘𝗷𝑙ⓑｇ𝙜𝐟𝓶𝚞ⓠ⒱𝙚𝙙𝖏𝗸𝘁⒲⒰𝖛𝔳⒝⒢𝓶𝕒𝚐𝓶𝒶𝘭𝚔𝘬𝒗𝑝ｄ𝒘𝓶𝙩𝖼𝗑𝔫𝑦𝕤𝔠𝕣𝚙",
    "𝙝𝗒ⓑ𝕡𝒎𝓈𝒶𝖺𝐞⒪𝘫𝒽ⓨ𝒋ｏ𝓬𝒛𝕥ⓓ𝗃𝓍𝘆𝔵𝘭⒩𝓾𝔦𝓅𝕒⒣𝚌𝔡𝐞𝓳𝘂𝔵𝒿ⓣ𝙩ⓦ𝗒ｆ𝗲𝖒𝐫𝕣𝖓⒳𝓀𝘱⒰𝚢𝔩𝘯ｋ𝘻𝖕𝙬𝓿𝙖ⓜ𝗵𝚒𝖊𝔡⒵𝘃𝚡𝗁𝓅𝙬𝑏𝙝𝓲𝑝𝔟𝕞𝓳𝓋𝓃𝕚𝔦𝕔𝙜𝒸𝘣𝐪ⓢ𝖙𝖍𝐬ⓦｐ𝚎ⓜ𝖖𝗲𝓶𝓉ⓚ",
    "𝙟𝔟𝗰𝗀𝔭𝚖𝚘𝒛𝐪𝘳𝒑⒫𝚞𝕜𝗰⒦𝑞𝑓𝖻𝓰⒭𝓹𝗒𝓺𝖞ｈ⒩ⓝ𝔞𝙠𝒂𝒎𝘁𝒇𝑒𝖈𝙦ⓣ𝚔𝗲𝘤𝙮𝓍𝑎ⓔⓢｋ𝕛𝔂ⓡ𝑦𝘺𝚌ｉ𝓉𝔣𝔟𝑤ⓐ𝓻𝒐𝔲𝒸𝙜ⓔ𝙪𝘱ｄ𝖼ｖ𝒎𝙡𝒹𝗒𝓉𝚙𝙯𝕘⒥𝘰ⓛℊ𝚗ⓡ𝙛𝓋𝘀𝒶𝗶𝔂𝕘𝘴𝓃𝓫𝕪𝙣𝖓𝔳𝖉𝑙",
    "𝗻𝓺𝔟𝕫𝕞𝑢𝔵𝕢𝕢ℴ𝖘𝐳𝕢ℊ𝚑𝖑𝕚𝓱𝙘𝚞ｚ𝕚𝖚𝐫𝑢𝚗ⓕⓚ𝔯𝕣ⓚ𝙢𝗋𝖘𝚍⒩𝔟𝕧𝚊⒟𝔦𝗾⒭𝗃⒝𝖝𝗿𝓃𝖏𝖝𝘦𝚜𝕣𝗏𝔱𝙣𝚑𝚝𝑝ｃ𝓺𝓱𝐨𝑎𝕧𝓊𝑥𝔫𝚕𝔱𝓲𝙖⒫𝒸𝙗𝓂ｕｊ𝒌𝘬𝐜𝖽𝒃𝓭𝗑ⓦ𝗌𝓱𝑠𝗲𝓶ⓘ𝕪𝙖𝘁𝔨𝓻𝓹𝖖𝔬",
    "𝚙𝑑𝔂𝑢ｙⓧ𝐲𝔯𝓲𝙥ⓠ𝔴𝓰𝔮𝕧ｅ𝐧𝕔𝔲𝔵𝒗𝔩𝓌ｎｊ𝔯⒦𝐨𝕨𝗓𝓼𝙘𝓁𝔳𝚓ｍ𝗁𝒋𝘁𝖉𝐡𝚘𝖓𝔵𝗊𝗄𝒃𝗈𝓽𝑖𝒎𝖘⒯ⓐ𝘤𝔦ⓛ𝐯ｌ𝗃ｆ𝘧𝕦𝖔𝕔𝙮𝘣𝙯𝐚ⓦⓑ𝘮ｚ𝕪⒴⒦𝙩𝗀ｌ𝕖𝘧𝑙𝓀𝘸𝘷𝓻𝚓𝒓𝓿𝖺𝔫𝗶𝙜𝖔𝑣𝕩𝘻𝑞𝗺𝒈",
    "𝐥ｉ𝕘𝚝𝒔𝖕ｈ𝐲𝖇⒭⒡ｒ𝔯𝘁𝓋𝒸𝕥ｚ𝘺𝓭𝗇𝖖𝑏𝐲⒞𝚐𝒿𝖿ｗ𝖟𝒽𝒅ⓘ𝔤𝘃𝕖𝒂𝗴𝗺𝘨𝖈⒵𝙫𝗸𝙢𝗹⒭⒜𝕤𝐮𝘰𝚊𝒿ｓ𝕦𝚊𝓵𝑝ｊ𝙬ⓘ𝐣𝘥𝖚𝒇𝗿𝕖𝕓𝙟𝐩𝙫ｅ𝒷𝑒𝐞⒠𝚟⒪𝖇⒲𝚊𝗽𝘦ℯ𝒓𝕙𝚗𝗇𝑙𝘴𝔥𝗄ｒ𝓰𝖕𝒃𝘅𝓪ｘｆ",
    "⒜𝐰𝖎⒨𝗱𝖺𝗮𝒆𝗼𝕥⒱ｙ⒲𝖖𝔯𝗓𝗷𝔁𝗁𝚎𝕨𝓲𝒷𝗋ⓐ𝐰𝑙𝐨𝑡𝗽𝒂𝘪𝐣𝔪𝘷𝚛𝓉𝘆𝖏𝔱𝓂𝑚𝘇𝒎𝔵𝗷𝙘𝘰𝑤𝐦𝓰ａ𝙯𝒓𝗓𝚚𝖼𝕦𝓱𝙜ⓙ𝚣𝚐𝐛𝙙ⓚ𝒌𝗸𝑡⒣𝕥𝘯𝖘𝙭𝙞𝕘𝒐𝐢ｆ⒮𝖙ⓘ𝘧ⓜ𝕤𝒌𝒛𝓪𝓈𝘬𝖺𝕡⒤𝓊𝚓𝘪𝖒𝐰𝗿𝑧",
    "𝘁𝙤𝑏𝔦𝓸𝒔𝗱⒠𝖍ｊ𝔯𝔵𝐠𝒃ⓩ𝓬𝑝𝕩𝒖𝒿𝕨𝖝𝙧𝑤𝔂𝐝𝐪𝑢𝚒𝗸ⓦ𝙤𝕝ⓤ𝔬𝚜⒵𝗃𝓾𝑛𝙬𝖕⒪𝚠𝓈𝒓𝒇𝙤𝓵𝐮ｗ𝓅𝒑ｉ𝕩𝗒𝓽ⓞ𝗱𝕪𝘸𝘶𝔶𝚢𝓭⒭𝚑𝘩ⓘ𝙖𝓰𝙣𝘆𝘨𝔤𝕢𝕞𝑎𝐪ⓣ𝚜𝘦𝒇𝖏𝒋ⓘ𝚚𝕢𝐦𝗁𝓶ｖ𝘶𝒉⒜𝗊𝗻𝘷𝙘𝚢",
    "𝘸𝙘𝒓𝐡𝓿𝕢𝔵ｋ𝖛𝒈ℯ𝙤𝘤𝔀𝔵𝕓𝒹𝘢𝖻𝒗𝙢𝘳𝑠𝔧𝖘𝘸𝒚𝖇𝐣𝓂𝘬𝓊𝒏ⓧ𝗺𝑚𝐞𝖘𝓫⒦𝓊ｑ𝘲ｋ𝐢𝘢𝗎𝗅𝔶ｐ𝓍𝖘𝓃𝙛ｑ𝒋𝔟𝖛𝘂𝖜ⓣ𝓳𝐥𝓀ⓦ𝐰𝙠𝗉𝖉𝐲𝑎𝕗𝔰𝐦𝔪𝐱𝔠𝒗𝚖𝑒𝗲𝙘𝑏𝓏𝒽𝓰𝓵𝚢𝒔ⓓ⒳𝖟𝕧𝖍𝔃ｑ𝓴𝓻𝑐𝓺",
    "⒡𝑘𝘵𝗄ｋ𝕜𝗷𝓎𝚋𝙨𝘯ⓧ𝒍𝚞𝗓𝒖𝐛𝖆𝚕𝓹𝔪⒳𝔯⒮𝚝ⓔ𝓸𝐯⒦𝘨ⓒ𝐜𝐲𝔱𝓸𝑟𝘣𝘯𝙢𝚏⒮𝓲𝕚𝘬𝐲ⓧ𝔷𝚚𝓻𝓸𝘱ｂ𝘤𝐦𝖻𝖼⒩𝗇𝑖𝓍⒬𝐚𝐯𝗅𝔲ℎ𝒒𝙡𝘥𝓉𝘤𝒆𝒂𝓻ⓞ𝖎𝒹𝖿𝗯𝒚𝔟𝒛𝓼𝔨𝕙𝚟𝗑⒨ｔａ𝘮𝑔ｒ𝔳𝕨𝕨𝖾𝙞𝕔𝖓",
    "𝚌𝕜𝘴𝔩⒯𝚎𝙤𝙠ｑ𝒚𝑗ｉ𝕟𝑟𝓼𝕛ｘ𝑢𝑣ｈ𝖟ⓕ𝖈ⓙ𝓷𝗒𝗁𝒃𝑛𝗂𝕚𝓪𝓶⒫𝘅𝔬𝘱𝖺𝙛⒪ℴ𝙥𝓎𝔨𝖻ℴ𝑧𝒗𝕡𝒾𝗯ⓥ𝑣⒭𝐭𝙝ⓥ⒥𝗂𝓬ⓔⓥ𝗺𝑔𝑖⒡𝙞𝔀𝙖ｋｃｋ⒞𝙬𝚟𝗿𝙫𝔫ｕ𝓅ⓞℎ𝙞𝖞⒰𝐥𝒖𝓿𝕚𝖍ｅ𝕢𝕦𝓰𝗒𝘱ⓓ𝘢𝒆⒥",
    "ｆ𝖒𝘆𝚜𝙠𝗵𝖊𝓯𝒙⒝⒝𝐬ⓞ𝙧𝖜𝕖𝒎ⓦ𝔥𝘅𝔳𝚗𝚊𝓂𝘮𝓇𝖿𝘧𝖜𝗁⒭𝗺𝘴𝔬𝔪𝗵𝓫𝑢𝒒𝘴𝒈𝐳⒰𝓫ｘ𝗳𝒿⒧𝕠𝖜𝒏𝙞𝘰ｖ𝐲⒟𝗉ⓑⓑ𝙜ⓖ𝕪⒤𝐯⒟⒰𝙮ⓑ𝓭𝘻𝐰ｑ𝓻𝒽𝔬𝚕𝙭𝗺⒲𝑛𝖺𝒕𝔡𝗹𝔤𝒸𝒘𝐡𝔂𝒶𝐣𝓶𝐝⒝𝖜ｌ𝑢𝔷𝒆𝕞",
    "𝔮𝔪𝕛𝕡𝑜𝙬ｊ𝖟⒦𝘄𝔷𝓷ⓧ𝘀𝗮ｉ𝓹𝘪ⓑ𝗇𝖻𝙠𝒅𝖙𝚐𝓫𝚏𝗈𝖑⒬𝑤ｗｍ𝐨𝔯𝖔𝑏ｐ𝘤𝒇ⓚ𝑜ⓡ𝒄ｗ𝙨𝐨𝗰𝖻𝒑ｔ𝓀𝗂𝔶𝖼ｐⓑ𝔵𝒾𝔮ｆ𝓲𝘯𝚗𝕪⒠ⓒ𝔩𝘹ⓢⓘ𝓀𝘅𝗐𝓁𝘥𝑝𝔬ⓣ𝗮ⓡ⒜𝐫𝔬𝓁𝙧𝓶𝒶𝙯𝒗𝕗𝘇𝑝𝐠𝒏𝚢𝑟𝒻ℴ𝒃",
    "𝑞𝒹𝗼𝒊𝘩𝗴𝖈𝒎ｊ𝖻𝗰𝙙𝖝𝖚𝖔𝙡⒪ｖ𝚌ⓑ𝙪𝙤𝗀⒭𝙗𝒸𝘴𝘂𝐚𝗐𝒏𝖈𝔫𝕪𝖓𝕓ⓞ𝔷𝕤𝖖𝘂𝗎𝕪𝕤⒱𝖉𝗴𝐝𝚋𝐪𝒘𝕧⒲ⓙ⒞𝔞𝘪𝓫𝓀𝙬𝖝𝔯𝘮ｆ𝘮𝔞𝚛𝕟𝓎𝔦ℴ𝔠𝑧𝒗𝕗𝓅𝗽ｓ𝙫𝓊𝘵⒥𝙚𝔲𝒊𝖕𝖺ⓛ𝖍𝔷𝔫𝖈⒲𝓱𝐥ⓡ𝙞𝐨𝚡𝖏",
    "ⓞｄ𝕣𝒓𝘥𝖚ｊ𝒄𝚘𝙛𝑣𝕔𝕒𝔢⒩𝔧𝓋𝓬⒥𝙢𝗸𝗮𝔴𝖞𝘁𝒗𝚛𝗌𝖇𝗻𝒒𝘵𝒓𝘀𝗱𝙩⒴ｂ𝙯𝙯𝓃⒧𝙜⒭⒩𝕕⒭𝑜𝖌𝕦𝔭𝔳ⓒ𝘃𝔂𝑝𝖑𝖌𝕣⒬𝗼𝖺𝐳𝒛𝒸𝗌𝓷𝓮𝘺𝓫ｕ⒢𝗲𝗯𝓭ｙ𝐰𝘷⒲⒯𝓶𝓳𝒿𝗇𝔁⒢𝖽𝑐𝕦𝐭𝒐ⓞ𝒘𝓬𝕟ℎ𝗵𝕢ⓙ𝚝",
    "𝚘𝓴ｘ𝕓𝒙𝚍𝗶𝑤𝖽𝔥𝕩𝗃𝐜𝑦𝙛𝒉ⓗ𝗒𝘢𝚚⒞𝒎⒡𝔀𝚍𝑙ⓤ𝖈𝓪𝔤𝒆𝐬𝔷𝖾ⓡ𝔥ⓒ𝒎𝙚ｙ𝚝ⓣｄ𝙩𝗶𝒄ⓕｊ𝒖𝐰𝚗𝐠𝑧⒤⒢𝘁𝒙𝔦ｔ⒧ⓣｇ𝓃𝚔ｕ𝒃𝙯𝑎𝓊𝕥𝙠𝗈𝙪𝐞ⓖ𝑢𝑘𝗺𝔡𝙫𝚌ⓠ𝘀𝚐𝔭𝐝𝕠𝒏𝖚𝑓𝒇𝕜𝐦𝖇𝔳𝘤𝒂𝗹𝕥𝓻",
    "𝕨𝓽𝘵𝖖𝖾𝚓𝙗𝔰𝓪𝗯𝓾ｗ𝚢𝘫ⓦ𝒉ｂⓣ𝖗ⓘ𝑛𝖍𝘸𝕪𝒷𝗱ａ𝘮𝗽𝒌ｃ𝚑ｕ𝙗𝕒⒩𝘇⒭𝐢ｑ𝔃𝚠𝘰𝙪𝑒𝖻𝗓𝕖𝕞⒮⒠𝘷𝑢𝖓𝕕ｗ𝑠𝔢ⓡ𝕕𝓏𝐱𝐮𝐤ｕ𝓀ⓥ𝕝𝓼𝔲𝕣𝗈𝒶⒣𝙚𝘵ｉ𝗱𝔰⒵𝔧𝔬𝑛ⓣ𝖜𝚌𝘧𝔢𝗱⒴𝕦𝓇𝖻𝐦𝗊𝒷𝑣𝓼ｋ⒣",
    "𝓌𝑔𝒾𝙞𝔬𝕟𝓯𝑑𝔯𝗲𝑔𝔮𝓇𝗶ⓟⓐ𝓍𝗇𝐝𝖑𝕒𝐝ⓤ𝑜𝑢ⓣ⒧𝒐𝑝𝙣𝔪𝐫𝒅𝐜𝖙𝘶𝕪𝔰ⓖ𝙜𝘇𝒂𝓎𝖍𝘢𝕡𝖺𝙗𝗊𝙫𝔪𝓀𝘁𝕧𝖑𝗮𝗲𝗀𝖑⒪𝕡𝘃ⓣ⒰𝒛𝚐𝗼𝒆𝖾𝚙ⓖ𝚖𝔪𝗅ｙ𝖛ⓡ𝘸𝑓𝐲𝚝⒢ｗ𝒷𝔷𝔴𝑛𝚓ⓠⓟ𝖞𝓭𝖊𝙣𝙣𝑡ⓝ𝚍ⓩ𝔟",
    "𝗏ℊ𝚏𝓌𝒒𝔩𝚔ⓙ⒡𝙗𝘰𝖿⒴𝑓ℴ⒫ⓒ𝗇𝑤𝔞𝖉𝔮ⓚｑ𝗰𝔶𝙡ａ𝚘𝕟𝖜𝔂⒡𝖍𝔯𝘻𝕝𝚝𝚜𝔤𝑚𝖐𝔬𝔷𝕓⒢ｃ𝓼𝖌⒝𝙡𝙮⒣𝗸𝔁𝐦ａ𝚎⒞𝚊𝕣𝑗𝒊𝗈𝕤𝚛ｑ𝕫⒟ⓠ𝓻𝒷𝚖𝗯𝘷𝓼𝖆𝚞𝔷ⓙℯ𝘨𝐟𝖐𝑖ⓧⓗ𝙣𝚖𝑖𝖒ⓘ𝑢𝘦𝚐𝕗𝔬𝕢ⓕ𝔟",
    "ｘ⒬ⓚ𝔯𝕩𝓾ⓑｑｕｋ𝘭𝔢𝐲𝚛𝙛𝚖𝔴ⓨ𝖚𝓍𝐞𝐡𝑗𝒿𝒷𝔯𝒕𝒔𝔱ℯ𝚝⒩ｊ𝑓𝙠𝚜𝕣𝔥ⓗｂ𝔪𝘤𝕡𝚘ⓨ𝖑𝗐ｂ𝖝𝔩𝖙𝒎𝕚ｒ𝑡𝐯𝒉ⓦ𝘬𝒹𝔵⒭𝘄𝚢𝖐𝗼ⓩℯ𝙤𝚋𝒂𝓎𝔭𝖖𝑖ⓛ𝙖𝕧𝖻𝚖ｈ𝓸𝐰⒴𝔡𝐮𝔮𝑖𝓳𝖋ｃ⒡𝙯𝔵𝘰𝔫𝖈𝓴ⓢ𝙦",
    "𝕖𝒊⒝𝓴𝘭𝗏𝖌𝗾𝘭𝒉𝖖𝑑𝖏𝓺𝔡𝓇𝗎𝔣𝘤𝑡𝔷𝑐𝓈𝚐𝑑𝔠𝓎𝒉𝘀𝐦𝕦𝕞𝐠𝒽𝗰𝗴𝓾𝘵𝗸𝑗𝚓𝗻𝒽𝒙𝔱𝚛⒫𝒶𝗌𝖒𝑔𝖓𝕝𝖗𝙚𝐮𝐥𝚞𝑡𝔵⒴⒱ｒ𝓾ｋ𝙛𝒷𝖗𝗊𝔣𝖗ⓦ𝔂⒞𝘨𝖞𝓉𝒹𝚏𝗳ｘ𝐲𝙠𝙫𝑑𝓶𝑔𝑢ⓞ𝘥⒠𝔲𝗷𝙭𝔷𝔬ｃ𝔃𝖑⒟",
    "𝕟𝖊𝓎ⓝｑ𝒙𝖟𝙫𝑑𝐢𝚎𝗒𝒖𝗮𝖎𝙦𝓫𝓁𝖺𝕥𝓬𝕙𝗉𝔠⒱𝖏𝐱𝚒𝓂𝐨𝗉𝕜ｌ𝓁𝙛𝓮𝘦ｚ𝑦𝕕𝖙𝕓ⓣ𝒕𝑣𝕗𝒛𝔵𝓷𝑥𝕫𝔦𝓷𝖜𝚗⒨𝗾ｖⓤ𝓷𝚘𝘧𝓆𝘴⒥𝒻⒪𝚣𝘃𝘩𝑓𝐮𝒖𝑛𝗅𝗴𝖘𝖊𝗇𝗓𝑖𝗐𝓾𝖖𝓰⒫𝘭𝓺ｓ𝙟𝓌𝓈𝓴𝘲𝗇𝓺𝙯𝖟𝘬⒡"
  ];

  const preTime = Date.now()
  const operations = 1_000_000;
  for (let i = 0, len = list.length; i < operations; i++) {
    cs.purify(list[i % len]);
  }
  const postTime = Date.now()
  console.log('Purifications per second: ' + (operations / (postTime - preTime) * 1000).toFixed(0) + ' ops');
  console.log('Example string: ' + cs.purify(list[0]));
}

/**
 * Performance test of BST.search() v. String.indexOf() v. RegExp.test()
 */
export const searchPerformance = (): void => {
  const list: string[] = [];
  const alphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const aLen: number = alphabet.length;
  for (let i = 0; i < 1; i++) {
    for (let j = 0; j < 15; j++) {
      for (let k = 0; k < aLen; k++) {
        list.push(alphabet[i] + alphabet[j] + alphabet[k]);
      }
    }
  }
  console.log('List length:\t\t\t' + list.length + ' items.');
  
  const profanity = new ProfanityBuilder({
    defaultProfanityList: 'exclude',
    doubleRating: 'throwError'
  }).add(list)
    .build();

  const cycles = 10000;
  const len = list.length;
  
  // BST.search()
  let preTime = Date.now();
  for (let j = 0; j < cycles; j++) {
    for (let i = 0; i < len; i++) {
      profanity.search(list[i])?.string;
    }
  }
  let postTime = Date.now();
  console.log('BST.search():\t\t\t' + (cycles * len / (postTime - preTime) * 1000).toFixed(0) + ' ops.');
  
  // String.indexOf() => index
  preTime = Date.now();
  for (let j = 0; j < cycles; j++) {
    for (let i = 0; i < len; i++) {
      list.indexOf(list[i]);
    }
  }
  postTime = Date.now();
  console.log('String.indexOf() => index:\t' + (cycles * len / (postTime - preTime) * 1000).toFixed(0) + ' ops.');

    // String.indexOf() => string
    preTime = Date.now();
    for (let j = 0; j < cycles; j++) {
      for (let i = 0; i < len; i++) {
        list[list.indexOf(list[i])];
      }
    }
    postTime = Date.now();
    console.log('String.indexOf() => string:\t' + (cycles * len / (postTime - preTime) * 1000).toFixed(0) + ' ops.');
  
  // RegExp.test()
  // Too much time.
}

/**
 * Show example of using the filter.
 */
export const examples = (): void => {
  const filter = new FilterBuilder({
    confusablesByPackage: 'include',
    confusablesByUnicode: 'exclude',
    confusables: 'purify',
    doubleRating: 'overwrite',
    // emojis: 'allow'
  })
    .blacklistAdd([
      'pancake', 'candy', 'cookie', 'chocolate',
      'cupcake', 'pie', 'pastry', 'ice cream',
      'dessert', 'cake', 'doughnut', 'muffin'
    ], 1)
    .blacklistAdd([
      'mushroom', 'cucumber', 'leek', 'onion',
      'beet', 'spinach', 'broccoolii', 'corn',
      'yam', 'tomato', 'pumpkin', 'asparagus',
    ], 2)
    .blacklistAdd('pancake', 3, 'overwrite')
    .blacklistRemove('mushroom')
    .blacklistAdd('pink mushroom') // No rate => use default 0
    .build();
  
  console.log(filter.search('pancake'));
  // Prints { purified: 'pancake', matches: [ { string: 'pancake', rate: 3 } ] }
  
  console.log(filter.search('chocolate'));
  // { purified: 'chocolate', matches: [{ string: 'chocolate', rate: 1 }] }
  
  console.log(filter.search('pink mushroom'));
  // Prints { purified: 'pink mushroom', matches: [{ string: 'pink mushroom', rate: 0 }] }
  
  console.log(filter.search('abc123')); // Never added
  console.log(filter.search('mushroom')); // Added and removed
  // Both print { purified: 'abc123', matches: [] }
}

/**
 * Show example of using the filter.
 */
export const testSlicer = (): void => {
  const filter = new FilterBuilder()
    .blacklistAdd([
      'pancake', 'candy', 'cookie', 'chocolate',
      'cupcake', 'pie', 'pastry', 'ice cream',
      'dessert', 'cake', 'doughnut', 'muffin'
    ], 1)
    .blacklistAdd([
      'mushroom', 'cucumber', 'leek', 'onion',
      'beet', 'spinach', 'broccoolii', 'corn',
      'yam', 'tomato', 'pumpkin', 'asparagus',
    ], 2)
    .blacklistAdd('pancake', 3, 'overwrite')
    .blacklistRemove('mushroom')
    .blacklistAdd('pink mushroom') // No rate => use default 0
    .build();
  
  console.log(filter.search('Please make a pancake for me.'));
  console.log(filter.search('chocolate'));
  console.log(filter.search('pink mushroom'));
  console.log(filter.search('abc123'));
  console.log(filter.search('mushroom'));
}